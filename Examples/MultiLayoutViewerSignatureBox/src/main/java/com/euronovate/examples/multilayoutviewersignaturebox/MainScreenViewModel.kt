package com.euronovate.examples.multilayoutviewersignaturebox

import android.app.Activity
import androidx.lifecycle.ViewModel
import com.euronovate.auth.model.ENAuthConfig
import com.euronovate.bio.ENBio
import com.euronovate.bio.extension.with
import com.euronovate.bio.model.enums.ENSignatureSourceType
import com.euronovate.logger.ENLogger
import com.euronovate.logger.extension.with
import com.euronovate.logger.model.ENLanguageConfig
import com.euronovate.logger.model.ENLanguageType
import com.euronovate.logger.model.ENLogServerConfig
import com.euronovate.logger.model.ENLogServerConfigType
import com.euronovate.logger.model.ENLoggerConfig
import com.euronovate.mobilesdk.ENMobileSDK
import com.euronovate.mobilesdk.extensions.emitEvent
import com.euronovate.mobilesdk.model.ENCertificateOwnerInfo
import com.euronovate.mobilesdk.model.ENMobileSDKResponse
import com.euronovate.mobilesdk.model.ENMobileSdkConfig
import com.euronovate.mobilesdk.model.ENNetworkConfig
import com.euronovate.mobilesdk.model.SignatureMode
import com.euronovate.mobilesdk.model.enums.ENCertificateIntegrityType
import com.euronovate.mobilesdk.model.enums.ENDocumentSourceType
import com.euronovate.mobilesdk.model.enums.ENEventType
import com.euronovate.mobilesdk.model.events.ENSignDocument
import com.euronovate.mobilesdk.theme.ENDefaultTheme
import com.euronovate.pdfmiddleware.ENPdfMiddleware
import com.euronovate.pdfmiddleware.extension.with
import com.euronovate.pdfmiddleware.model.ENPdfMiddlewareConfig
import com.euronovate.signaturebox.ENSignatureBox
import com.euronovate.signaturebox.extension.with
import com.euronovate.signaturebox.model.ENSignatureBoxConfig
import com.euronovate.signaturebox.model.ENSignatureImageConfig
import com.euronovate.signaturebox.model.ENSignatureImageModeConfig
import com.euronovate.signaturebox.model.enums.ENSignatureBoxType
import com.euronovate.signaturebox.model.enums.ENSignatureContentMode
import com.euronovate.utils.preferences.ENSettings
import com.euronovate.utils.preferences.with
import com.euronovate.utils.util.ENBase64Utils
import com.euronovate.viewer.ENViewer
import com.euronovate.viewer.extension.with
import com.euronovate.viewer.model.ENViewerConfig
import com.euronovate.viewer.model.enums.ENSignFieldPlaceholder
import com.euronovate.viewer.model.enums.ENViewerBarType
import com.euronovate.viewer.model.enums.ENViewerType
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update

enum class InitializationState {
    NotInitialized,
    Initialized
}

class MainScreenViewModel : ViewModel() {

    private val SDK_ONLINE_LICENSE_KEY = "your-license-key"
    private val SDK_ONLINE_LICENSE_URL = "your-license-server-url"
    private val SDK_OFFLINE_LICENSE_JWT = "your-offline-license-jwt"

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean>
        get() = _isLoading

    private val _initializationState = MutableStateFlow(InitializationState.NotInitialized)
    val initializationState: StateFlow<InitializationState>
        get() = _initializationState

    private val _selectedViewerType = MutableStateFlow(ENViewerType.simple)
    val selectedViewerType: StateFlow<ENViewerType>
        get() = _selectedViewerType

    private val _selectedViewerBarType = MutableStateFlow(ENViewerBarType.simple)

    private val _selectedSignatureBoxType = MutableStateFlow(ENSignatureBoxType.simple)
    val selectedSignatureBoxType: StateFlow<ENSignatureBoxType>
        get() = _selectedSignatureBoxType

    fun initLibrary(context: Activity) {

        ENMobileSDK.free()

        ENMobileSDK.Builder()
            .with(context = context)
            .with(settings = ENSettings.Builder().build())
            .with(
                logger = ENLogger.Builder()
                    .with(
                        ENLoggerConfig(
                            debuggable = true,
                            logLevel = ENLogger.VERBOSE,
                        )
                    )
                    .build()
            )
            .with(
                mobileSdkConfig = ENMobileSdkConfig(
                    networkConfig = ENNetworkConfig(
                        skipSSL = true,
                        OAuth2Config = null
                    ),
                    considerAllSignatureFieldCharacters = false,
                    certificateOwnerInfo = ENCertificateOwnerInfo(),
                    certificateIntegrity = ENCertificateIntegrityType.AutoGenerated(),
                    languageConfig = ENLanguageConfig(
                        selectorVisible = true,
                        languageEnabled = arrayListOf(
                            ENLanguageType.en,
                            ENLanguageType.it,
                        )
                    ),
                    defaultSignatureMode = SignatureMode.Graphometric,
                )
            )
            .with(theme = ENDefaultTheme())
            .with(
                authConfig = ENAuthConfig(
                    licenseKey = SDK_ONLINE_LICENSE_KEY,
                    serverUrl = SDK_ONLINE_LICENSE_URL,
                    jwt = SDK_OFFLINE_LICENSE_JWT,
                )
            )
            .with(
                ENViewer.Builder()
                    .with(
                        ENViewerConfig(
                            signFieldPlaceholder = ENSignFieldPlaceholder.defaultPlaceholder(),
                            viewerType = ENViewerType.simple, viewerBarType = ENViewerBarType.simple
                        )
                    )
                    .build()
            )
            .with(
                ENPdfMiddleware.Builder().with(
                    ENPdfMiddlewareConfig(
                        closeDocumentStatusOnConfirm = true,
                        abortDocumentStatusOnCancel = false
                    )
                ).build()
            )
            .with(
                ENSignatureBox.Builder()
                    .with(
                        signatureBoxConfig = ENSignatureBoxConfig(
                            signatureSourceType = ENSignatureSourceType.Any,
                            signatureImageConfig = ENSignatureImageConfig(
                                useAlpha = true,
                                signatureContentMode = ENSignatureContentMode.ignoreFieldRatio,
                                signatureImageModeConfig = ENSignatureImageModeConfig.signatureSignerNameAndTimestamp(
                                    watermarkReservedHeight = 0.3f
                                )
                            ),
                            signatureBoxType = ENSignatureBoxType.simple,
                            minBioPackagesToAllowConfirmationUsingStylus = 450,
                            minBioPackagesToAllowConfirmationUsingFinger = 100,
                        ),
                    )
                    .build()
            )
            .with(ENBio.Builder().build())
            .with { response ->
                when (response) {
                    is ENMobileSDKResponse.error -> {
                        _initializationState.update {
                            InitializationState.NotInitialized
                        }
                    }

                    is ENMobileSDKResponse.success -> {
                        _initializationState.update {
                            InitializationState.Initialized
                        }
                    }

                    else -> {}
                }
            }
            .build()
    }

    fun onViewerTypeSelected(type: Triple<String, ENViewerType, ENViewerBarType>) {
        _selectedViewerType.value = type.second
        _selectedViewerBarType.value = type.third
        ENViewer.getInstance().viewerConfig.viewerType = type.second
        ENViewer.getInstance().viewerConfig.viewerBarType = type.third
    }

    fun onSignatureBoxTypeSelected(type: ENSignatureBoxType) {
        _selectedSignatureBoxType.value = type
        ENSignatureBox.getInstance().signatureBoxConfig.signatureBoxType = type
    }

    fun openDocument(activity: Activity) {
        ENMobileSDK.emitEvent(
            ENEventType.signDocument,
            ENSignDocument(
                documentType = ENDocumentSourceType.asset("1-mandatory-1-optional-adobe.pdf"),
                certPemBase64 = ENBase64Utils.toBase64(activity.assets.open("encert.pem").readBytes())
            )
        )
    }
}